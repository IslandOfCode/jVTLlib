FinancialAccounting:=get("LNKD_ENTRPRSS")
FinancialAccounting := FinancialAccounting[
		keep(CNTRPRTY_ID/*,ANNL_TRNVR*/,NMBR_EMPLYS),
		//filter(ANNL_TRNVR<>null),
		calc("C001" as "CNTRPRTY_ID")//,
		//rename(NMBR_EMPLYS role attribute)
	]
printvar FinancialAccounting
agg:=avg(FinancialAccounting) group by (CNTRPRTY_ID)
printvar agg


/*A:=@{prova}
printvar A


//LNKD_ENTRPRSS
FinancialAccounting:=get("LNKD_ENTRPRSS")
FinancialAccounting := FinancialAccounting[keep(CNTRPRTY_ID,ANNL_TRNVR)]//,filter(ANNL_TRNVR<400)]
printvar FinancialAccounting

define datapoint ruleset PRM001(CNTRPRTY_ID){
 //RL1: when ANNL_TRNVR<>null then (ANNL_TRNVR>1000) or (NMBR_EMPLYS>25) errorcode("FAILURE PRM001")
	RL1: when true then CNTRPRTY_ID<>"C001" errorcode("FAILURE PRM001")
}

result := check(FinancialAccounting, PRM001, all, condition)
result := result[keep(CONDITION,RULE_ID,ANNL_TRNVR,PEPPINO)]

printvar result
//questo peppino Ã¨ una colonna per testare la resilienza delle clausole keep/rename, quando esposte
//a parametri non esattamente corretti. In questo caso PEPPINO non esiste.
result := result[rename(PEPPINO as "LUIGI" role attribute)]

printvar result*/